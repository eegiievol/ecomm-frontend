{"ast":null,"code":"import React, { useEffect, useState, useReducer, useRef } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar initialState = {\n  isFocus: false,\n  focusIndex: -1\n};\n\nvar focusReducer = function focusReducer(state, action) {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return _extends({}, state, {\n        focusIndex: action.focusIndex\n      });\n\n    case 'toggleFocus':\n      return _extends({}, state, {\n        isFocus: action.isFocus\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar styles = {\n  \"comboBox\": \"_3tcyg\",\n  \"comboBoxInput\": \"_3LDgJ\",\n  \"comboBoxPopover\": \"_WbEAz\",\n  \"comboBoxList\": \"_r3jpc\",\n  \"comboBoxOption\": \"_2iQTD\",\n  \"rightElement\": \"_1GXAI\",\n  \"leftElement\": \"_2e4AG\"\n};\n\nvar useScroll = function useScroll(focusedIndex, scrollableContainer, listContainer) {\n  useEffect(function () {\n    if (listContainer.current && scrollableContainer.current && focusedIndex >= 0) {\n      if (focusedIndex === 0) scrollableContainer.current.scrollTo({\n        top: 0\n      });\n      var children = listContainer.current.childNodes;\n      var focusedChild = children && children.length ? children[focusedIndex] : null;\n\n      if (focusedChild && focusedChild.getBoundingClientRect) {\n        var _focusedChild$getBoun = focusedChild.getBoundingClientRect(),\n            optionHeight = _focusedChild$getBoun.height;\n\n        var _scrollableContainer$ = scrollableContainer.current.getBoundingClientRect(),\n            listHeight = _scrollableContainer$.height;\n\n        var scrollTop = scrollableContainer.current.scrollTop;\n        var isAbove = focusedChild.offsetTop <= scrollTop;\n        var isInView = focusedChild.offsetTop >= scrollTop && focusedChild.offsetTop + optionHeight <= scrollTop + listHeight;\n\n        if (!isInView) {\n          if (isAbove) {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop\n            });\n          } else {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop - listHeight + optionHeight\n            });\n          }\n        }\n      }\n    }\n  }, [focusedIndex, listContainer, scrollableContainer]);\n};\n\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar ENTER_KEY = 13;\nvar ESCAPE_KEY = 27;\n\nvar ComboBox = function ComboBox(_ref) {\n  var comboBoxOptions = _ref.options,\n      onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      placeholder = _ref.placeholder,\n      onSelect = _ref.onSelect,\n      onOptionsChange = _ref.onOptionsChange,\n      optionsListMaxHeight = _ref.optionsListMaxHeight,\n      renderOptions = _ref.renderOptions,\n      style = _ref.style,\n      inputClassName = _ref.inputClassName,\n      className = _ref.className,\n      listClassName = _ref.listClassName,\n      optionsClassName = _ref.optionsClassName,\n      popoverClassName = _ref.popoverClassName,\n      highlightColor = _ref.highlightColor,\n      selectedOptionColor = _ref.selectedOptionColor,\n      enableAutocomplete = _ref.enableAutocomplete,\n      inputStyles = _ref.inputStyles,\n      name = _ref.name,\n      onBlur = _ref.onBlur,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      renderRightElement = _ref.renderRightElement,\n      renderLeftElement = _ref.renderLeftElement;\n  var optionMaxHeight = optionsListMaxHeight || 200;\n  var suggestionListPositionStyles = {};\n\n  var _useState = useState(comboBoxOptions),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var _useState2 = useState(defaultValue || ''),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useReducer = useReducer(focusReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var isFocus = state.isFocus,\n      focusIndex = state.focusIndex;\n\n  var _useState3 = useState(false),\n      isMouseInsideOptions = _useState3[0],\n      setIsMouseInsideOptions = _useState3[1];\n\n  var _useState4 = useState(false),\n      IsOptionsPositionedTop = _useState4[0],\n      setIsOptionsPositionedTop = _useState4[1];\n\n  var _useState5 = useState(-1),\n      selectedOptionIndex = _useState5[0],\n      setSelectedOptionIndex = _useState5[1];\n\n  var dropdownRef = useRef(null);\n  var optionsListRef = useRef(null);\n  useEffect(function () {\n    setOptions(comboBoxOptions);\n  }, [comboBoxOptions]);\n  useEffect(function () {\n    if (!isFocus) setInputValue(defaultValue || '');\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    });\n    setSelectedOptionIndex(defaultValue ? options.indexOf(defaultValue.toString()) : -1);\n  }, [defaultValue]);\n  useScroll(focusIndex, dropdownRef, optionsListRef);\n  useEffect(function () {\n    var _optionsContainerElem, _optionsContainerElem2;\n\n    var optionsContainerElement = dropdownRef.current;\n    var offsetBottom = window.innerHeight - (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem = optionsContainerElement.offsetParent) === null || _optionsContainerElem === void 0 ? void 0 : _optionsContainerElem.getBoundingClientRect().top);\n\n    if (optionMaxHeight > offsetBottom && (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem2 = optionsContainerElement.offsetParent) === null || _optionsContainerElem2 === void 0 ? void 0 : _optionsContainerElem2.getBoundingClientRect().top) > offsetBottom) {\n      setIsOptionsPositionedTop(true);\n    } else {\n      setIsOptionsPositionedTop(false);\n    }\n  }, [isFocus]);\n  if (IsOptionsPositionedTop) suggestionListPositionStyles = {\n    bottom: '100%',\n    marginBottom: '5px'\n  };else suggestionListPositionStyles = {\n    top: '100%',\n    marginTop: '5px'\n  };\n\n  var blurHandler = function blurHandler(event) {\n    if (!isMouseInsideOptions) dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    if (onBlur) onBlur(event);\n  };\n\n  var updateValue = function updateValue(index) {\n    if (index === void 0) {\n      index = focusIndex;\n    }\n\n    if (index !== -1) {\n      setInputValue(options[index]);\n      if (onOptionsChange) onOptionsChange(options[index]);\n    }\n  };\n\n  var resetFocusIndex = function resetFocusIndex() {\n    comboBoxOptions.forEach(function (option, index) {\n      if (option === options[focusIndex]) dispatch({\n        type: 'setFocusIndex',\n        focusIndex: index\n      });\n    });\n  };\n\n  var selectSuggestionHandler = function selectSuggestionHandler() {\n    updateValue();\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    setSelectedOptionIndex(focusIndex);\n    resetFocusIndex();\n    setOptions(comboBoxOptions);\n    if (onSelect) onSelect(options[focusIndex]);\n  };\n\n  var keyHandler = function keyHandler(event) {\n    var optionsContainerElement = dropdownRef.current;\n    var newFocusIndex = focusIndex;\n\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n          } else {\n            if (focusIndex >= options.length - 1) {\n              newFocusIndex = 0;\n              optionsContainerElement.scrollTop = 0;\n            } else {\n              newFocusIndex = focusIndex + 1;\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          dropdownRef.current = optionsContainerElement;\n          break;\n        }\n\n      case UP_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n          } else {\n            if (focusIndex <= 0) {\n              newFocusIndex = options.length - 1;\n              if (optionsContainerElement) optionsContainerElement.scrollTop = optionsContainerElement.scrollHeight;\n            } else {\n              newFocusIndex = focusIndex - 1;\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          dropdownRef.current = optionsContainerElement;\n          break;\n        }\n\n      case ENTER_KEY:\n        {\n          event.preventDefault();\n          if (focusIndex > -1 && focusIndex < options.length) selectSuggestionHandler();\n          break;\n        }\n\n      case ESCAPE_KEY:\n        {\n          event.target.blur();\n          dispatch({\n            type: 'toggleFocus',\n            isFocus: false\n          });\n          break;\n        }\n    }\n  };\n\n  var filterSuggestion = function filterSuggestion(filterText) {\n    if (filterText.length === 0) setOptions(comboBoxOptions);else {\n      var filteredSuggestion = comboBoxOptions.filter(function (option) {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\n      });\n      setOptions(filteredSuggestion);\n    }\n  };\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    if (onChange) onChange(event);\n    setInputValue(event.target.value);\n    if (enableAutocomplete) filterSuggestion(event.target.value);\n  };\n\n  var inputClickHandler = function inputClickHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    });\n  };\n\n  var focusHandler = function focusHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n  };\n\n  var mouseEnterHandler = function mouseEnterHandler(index) {\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: index\n    });\n    if (onOptionsChange) onOptionsChange(options[index]);\n  };\n\n  var backgroundColorSelector = function backgroundColorSelector(optionIndex) {\n    if (optionIndex === focusIndex && optionIndex === selectedOptionIndex) return {\n      backgroundColor: selectedOptionColor || '#63b3ed'\n    };else if (optionIndex === focusIndex) {\n      return {\n        backgroundColor: highlightColor || '#bee3f8'\n      };\n    } else if (optionIndex === selectedOptionIndex) {\n      return {\n        backgroundColor: selectedOptionColor || '#63b3ed'\n      };\n    } else return {};\n  };\n\n  return React.createElement(\"div\", {\n    className: className ? styles.comboBox + \" \" + className : styles.comboBox,\n    style: style\n  }, renderLeftElement && React.createElement(\"div\", {\n    className: styles.leftElement\n  }, renderLeftElement()), React.createElement(\"input\", {\n    onFocus: focusHandler,\n    onChange: inputChangeHandler,\n    placeholder: placeholder || '',\n    onKeyDown: keyHandler,\n    value: inputValue,\n    className: inputClassName ? styles.comboBoxInput + \" \" + inputClassName : styles.comboBoxInput,\n    onBlur: blurHandler,\n    name: name,\n    style: _extends({}, inputStyles, {\n      cursor: editable ? 'text' : 'pointer',\n      paddingLeft: renderLeftElement ? 30 : 10\n    }),\n    readOnly: !editable,\n    onClick: inputClickHandler\n  }), renderRightElement && React.createElement(\"div\", {\n    className: styles.rightElement\n  }, renderRightElement()), React.createElement(\"div\", {\n    className: popoverClassName ? styles.comboBoxPopover + \" \" + popoverClassName : styles.comboBoxPopover,\n    style: _extends({\n      opacity: isFocus ? 1 : 0,\n      visibility: isFocus ? 'visible' : 'hidden',\n      maxHeight: isFocus ? optionMaxHeight : 0\n    }, suggestionListPositionStyles),\n    ref: dropdownRef,\n    onMouseEnter: function onMouseEnter() {\n      return setIsMouseInsideOptions(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setIsMouseInsideOptions(false);\n    }\n  }, React.createElement(\"ul\", {\n    className: listClassName ? styles.comboBoxList + \" \" + listClassName : styles.comboBoxList,\n    ref: optionsListRef\n  }, options.map(function (option, index) {\n    return React.createElement(\"li\", {\n      className: optionsClassName ? styles.comboBoxOption + \" \" + optionsClassName : styles.comboBoxOption,\n      key: option,\n      style: _extends({}, backgroundColorSelector(index)),\n      onClick: function onClick() {\n        return selectSuggestionHandler();\n      },\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      onMouseEnter: function onMouseEnter() {\n        return mouseEnterHandler(index);\n      }\n    }, renderOptions ? renderOptions(option) : option);\n  }))));\n};\n\nexport default ComboBox;","map":{"version":3,"sources":["../src/reducer/focusReducer.ts","../src/hooks/useScroll.ts","../src/index.tsx"],"names":["initialState","isFocus","focusIndex","focusReducer","action","useScroll","useEffect","listContainer","scrollableContainer","focusedIndex","top","children","focusedChild","optionHeight","listHeight","scrollTop","isAbove","isInView","offsetTop","UP_ARROW","DOWN_ARROW","ENTER_KEY","ESCAPE_KEY","ComboBox","options","comboBoxOptions","onChange","defaultValue","placeholder","onSelect","onOptionsChange","optionsListMaxHeight","renderOptions","style","inputClassName","className","listClassName","optionsClassName","popoverClassName","highlightColor","selectedOptionColor","enableAutocomplete","inputStyles","name","onBlur","editable","renderRightElement","renderLeftElement","optionMaxHeight","suggestionListPositionStyles","setOptions","useState","inputValue","setInputValue","state","dispatch","useReducer","isMouseInsideOptions","setIsMouseInsideOptions","IsOptionsPositionedTop","setIsOptionsPositionedTop","selectedOptionIndex","setSelectedOptionIndex","dropdownRef","useRef","optionsListRef","type","optionsContainerElement","offsetBottom","window","bottom","marginBottom","marginTop","blurHandler","updateValue","index","resetFocusIndex","option","selectSuggestionHandler","keyHandler","newFocusIndex","event","filterSuggestion","filterText","filteredSuggestion","inputChangeHandler","inputClickHandler","focusHandler","mouseEnterHandler","backgroundColorSelector","optionIndex","backgroundColor","styles","comboBox","leftElement","onFocus","onKeyDown","value","comboBoxInput","cursor","paddingLeft","readOnly","onClick","rightElement","comboBoxPopover","opacity","visibility","maxHeight","ref","onMouseEnter","onMouseLeave","comboBoxList","comboBoxOption","key","onMouseDown","e"],"mappings":"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","sourcesContent":["type FocusStateType = {\n  isFocus: boolean\n  focusIndex: number\n}\n\ntype Action =\n  | { type: 'setFocusIndex'; focusIndex: number }\n  | { type: 'toggleFocus'; isFocus: boolean }\n\nconst initialState: FocusStateType = {\n  isFocus: false,\n  focusIndex: -1\n}\n\nconst focusReducer = (state: FocusStateType, action: Action) => {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return { ...state, focusIndex: action.focusIndex }\n    case 'toggleFocus':\n      return { ...state, isFocus: action.isFocus }\n    default:\n      return state\n  }\n}\n\nexport { initialState, focusReducer }\n","// eslint-disable-next-line no-unused-vars\nimport { useEffect, RefObject } from 'react'\n\nconst useScroll = (\n  focusedIndex: number,\n  scrollableContainer: RefObject<HTMLDivElement>,\n  listContainer: RefObject<HTMLUListElement>\n) => {\n  useEffect(() => {\n    if (\n      listContainer.current &&\n      scrollableContainer.current &&\n      focusedIndex >= 0\n    ) {\n      if (focusedIndex === 0)\n        scrollableContainer.current.scrollTo({\n          top: 0\n        })\n      const children = listContainer.current.childNodes\n      const focusedChild =\n        children && children.length\n          ? (children[focusedIndex] as HTMLDivElement)\n          : null\n\n      if (focusedChild && focusedChild.getBoundingClientRect) {\n        const { height: optionHeight } = focusedChild.getBoundingClientRect()\n        const {\n          height: listHeight\n        } = scrollableContainer.current.getBoundingClientRect()\n        const scrollTop = scrollableContainer.current.scrollTop\n        const isAbove = focusedChild.offsetTop <= scrollTop\n        const isInView =\n          focusedChild.offsetTop >= scrollTop &&\n          focusedChild.offsetTop + optionHeight <= scrollTop + listHeight\n\n        if (!isInView) {\n          if (isAbove) {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop\n            })\n          } else {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop - listHeight + optionHeight\n            })\n          }\n        }\n      }\n    }\n  }, [focusedIndex, listContainer, scrollableContainer])\n}\n\nexport default useScroll\n","/* eslint-disable no-unused-vars */\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  useReducer,\n  ReactElement\n} from 'react'\n\nimport { initialState, focusReducer } from './reducer/focusReducer'\nimport styles from './index.css'\nimport useScroll from './hooks/useScroll'\n\ntype ComboBoxProps = {\n  options: string[]\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  defaultValue?: string\n  placeholder?: string\n  onSelect?: (option: string) => void\n  onOptionsChange?: (option: string) => void\n  optionsListMaxHeight?: number\n  renderOptions?: (option: string) => React.ReactNode\n  style?: React.CSSProperties\n  optionsClassName?: string\n  inputClassName?: string\n  className?: string\n  listClassName?: string\n  popoverClassName?: string\n  highlightColor?: string\n  selectedOptionColor?: string\n  enableAutocomplete?: boolean\n  inputStyles?: React.CSSProperties\n  name?: string\n  onBlur?: (event?: React.ChangeEvent<HTMLInputElement>) => void\n  editable?: boolean\n  renderRightElement?: () => ReactElement\n  renderLeftElement?: () => ReactElement\n}\n\nconst UP_ARROW = 38\nconst DOWN_ARROW = 40\nconst ENTER_KEY = 13\nconst ESCAPE_KEY = 27\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  options: comboBoxOptions,\n  onChange,\n  defaultValue,\n  placeholder,\n  onSelect,\n  onOptionsChange,\n  optionsListMaxHeight,\n  renderOptions,\n  style,\n  inputClassName,\n  className,\n  listClassName,\n  optionsClassName,\n  popoverClassName,\n  highlightColor,\n  selectedOptionColor,\n  enableAutocomplete,\n  inputStyles,\n  name,\n  onBlur,\n  editable = true,\n  renderRightElement,\n  renderLeftElement\n}) => {\n  const optionMaxHeight = optionsListMaxHeight || 200\n  let suggestionListPositionStyles: React.CSSProperties = {}\n\n  // Function that will check whether the defaultIndex falls inside the length of the options\n  // or else it will return -1\n\n  const [options, setOptions] = useState<string[]>(comboBoxOptions)\n  const [inputValue, setInputValue] = useState(defaultValue || '')\n  const [state, dispatch] = useReducer(focusReducer, initialState)\n  const { isFocus, focusIndex } = state\n  const [isMouseInsideOptions, setIsMouseInsideOptions] = useState(false) // This is used to determine whether the mouse cursor is inside or outside options container\n  const [IsOptionsPositionedTop, setIsOptionsPositionedTop] = useState(false)\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(-1)\n\n  const dropdownRef = useRef<HTMLDivElement | null>(null)\n  const optionsListRef = useRef<HTMLUListElement>(null)\n\n  useEffect(() => {\n    setOptions(comboBoxOptions)\n  }, [comboBoxOptions])\n\n  useEffect(() => {\n    if (!isFocus) setInputValue(defaultValue || '')\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    })\n    setSelectedOptionIndex(\n      defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    )\n  }, [defaultValue])\n\n  useScroll(focusIndex, dropdownRef, optionsListRef)\n\n  useEffect(() => {\n    // Position the options container top or bottom based on the space available\n    const optionsContainerElement: any = dropdownRef.current\n\n    const offsetBottom =\n      window.innerHeight -\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top\n\n    if (\n      optionMaxHeight > offsetBottom &&\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top >\n        offsetBottom\n    ) {\n      setIsOptionsPositionedTop(true)\n    } else {\n      setIsOptionsPositionedTop(false)\n    }\n  }, [isFocus])\n\n  if (IsOptionsPositionedTop)\n    suggestionListPositionStyles = {\n      bottom: '100%',\n      marginBottom: '5px'\n    }\n  else\n    suggestionListPositionStyles = {\n      top: '100%',\n      marginTop: '5px'\n    }\n\n  const blurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isMouseInsideOptions) dispatch({ type: 'toggleFocus', isFocus: false })\n    if (onBlur) onBlur(event)\n  }\n\n  const updateValue = (index: number = focusIndex) => {\n    if (index !== -1) {\n      setInputValue(options[index])\n      if (onOptionsChange) onOptionsChange(options[index])\n    }\n  }\n\n  // While searching, the options are filtered and the index also changed.\n  // So the focus index is set to original based on all the options.\n  const resetFocusIndex = () => {\n    comboBoxOptions.forEach((option: string, index: number) => {\n      if (option === options[focusIndex])\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: index\n        })\n    })\n  }\n\n  const selectSuggestionHandler = () => {\n    updateValue()\n    dispatch({ type: 'toggleFocus', isFocus: false })\n    setSelectedOptionIndex(focusIndex)\n    resetFocusIndex()\n    setOptions(comboBoxOptions)\n\n    if (onSelect) onSelect(options[focusIndex])\n  }\n\n  const keyHandler = (event: any) => {\n    const optionsContainerElement: any = dropdownRef.current\n    let newFocusIndex = focusIndex\n\n    switch (event.keyCode) {\n      case DOWN_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        // Also set the scroll top\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n        } else {\n          // If the focus reaches the end of the options in the list, set the focus to 0\n\n          if (focusIndex >= options.length - 1) {\n            newFocusIndex = 0\n            optionsContainerElement.scrollTop = 0\n          }\n          // Change the scroll position based on the selected option position\n          else {\n            newFocusIndex = focusIndex + 1\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        dropdownRef.current = optionsContainerElement\n        break\n      }\n      case UP_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n        } else {\n          // If the focus falls beyond the start of the options in the list, set the focus to height of the suggestion-list\n          if (focusIndex <= 0) {\n            newFocusIndex = options.length - 1\n\n            if (optionsContainerElement)\n              optionsContainerElement.scrollTop =\n                optionsContainerElement.scrollHeight\n          } else {\n            newFocusIndex = focusIndex - 1\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        dropdownRef.current = optionsContainerElement\n        break\n      }\n      case ENTER_KEY: {\n        event.preventDefault()\n        if (focusIndex > -1 && focusIndex < options.length)\n          selectSuggestionHandler()\n\n        break\n      }\n      case ESCAPE_KEY: {\n        event.target.blur()\n        dispatch({ type: 'toggleFocus', isFocus: false })\n        break\n      }\n    }\n  }\n\n  const filterSuggestion = (filterText: string) => {\n    if (filterText.length === 0) setOptions(comboBoxOptions)\n    else {\n      const filteredSuggestion = comboBoxOptions.filter((option) => {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1\n      })\n      setOptions(filteredSuggestion)\n    }\n  }\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(event)\n    setInputValue(event.target.value)\n    if (enableAutocomplete) filterSuggestion(event.target.value)\n  }\n\n  const inputClickHandler = () => {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    })\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    })\n  }\n\n  const focusHandler = () => {\n    dispatch({ type: 'toggleFocus', isFocus: true })\n  }\n\n  const mouseEnterHandler = (index: number) => {\n    dispatch({ type: 'setFocusIndex', focusIndex: index })\n    if (onOptionsChange) onOptionsChange(options[index])\n  }\n\n  const backgroundColorSelector = (optionIndex: number) => {\n    if (optionIndex === focusIndex && optionIndex === selectedOptionIndex)\n      return { backgroundColor: selectedOptionColor || '#63b3ed' }\n    else if (optionIndex === focusIndex) {\n      return { backgroundColor: highlightColor || '#bee3f8' }\n    } else if (optionIndex === selectedOptionIndex) {\n      return { backgroundColor: selectedOptionColor || '#63b3ed' }\n    } else return {}\n  }\n\n  return (\n    <div\n      className={\n        className ? `${styles.comboBox} ${className}` : styles.comboBox\n      }\n      style={style}\n    >\n      {renderLeftElement && (\n        <div className={styles.leftElement}>{renderLeftElement()}</div>\n      )}\n      <input\n        onFocus={focusHandler}\n        onChange={inputChangeHandler}\n        placeholder={placeholder || ''}\n        onKeyDown={keyHandler}\n        value={inputValue}\n        className={\n          inputClassName\n            ? `${styles.comboBoxInput} ${inputClassName}`\n            : styles.comboBoxInput\n        }\n        onBlur={blurHandler}\n        name={name}\n        style={{\n          ...inputStyles,\n          cursor: editable ? 'text' : 'pointer',\n          paddingLeft: renderLeftElement ? 30 : 10\n        }}\n        readOnly={!editable}\n        onClick={inputClickHandler}\n      />\n      {renderRightElement && (\n        <div className={styles.rightElement}>{renderRightElement()}</div>\n      )}\n      <div\n        className={\n          popoverClassName\n            ? `${styles.comboBoxPopover} ${popoverClassName}`\n            : styles.comboBoxPopover\n        }\n        style={{\n          opacity: isFocus ? 1 : 0,\n          visibility: isFocus ? 'visible' : 'hidden',\n          maxHeight: isFocus ? optionMaxHeight : 0,\n          ...suggestionListPositionStyles\n        }}\n        ref={dropdownRef}\n        onMouseEnter={() => setIsMouseInsideOptions(true)}\n        onMouseLeave={() => setIsMouseInsideOptions(false)}\n      >\n        <ul\n          className={\n            listClassName\n              ? `${styles.comboBoxList} ${listClassName}`\n              : styles.comboBoxList\n          }\n          ref={optionsListRef}\n        >\n          {options.map((option, index) => {\n            return (\n              <li\n                className={\n                  optionsClassName\n                    ? `${styles.comboBoxOption} ${optionsClassName}`\n                    : styles.comboBoxOption\n                }\n                key={option}\n                style={{\n                  ...backgroundColorSelector(index)\n                }}\n                onClick={() => selectSuggestionHandler()}\n                onMouseDown={(e) => e.preventDefault()}\n                onMouseEnter={() => mouseEnterHandler(index)}\n              >\n                {renderOptions ? renderOptions(option) : option}\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default ComboBox\n"]},"metadata":{},"sourceType":"module"}